package com.company.videogamestore.dao;

import com.company.videogamestore.model.TShirt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 * TShirt Repository class with JdbcTemplate, prepared statements
 */
@Repository
public class TShirtDaoJdbcTemplateImpl implements TShirtDao {
    private JdbcTemplate jdbcTemplate;

    //Prepared Statements for TShirt
    private static final String INSERT_TSHIRT_SQL =
            "insert into t_shirt (size, color, description, price, quantity) values (?, ?, ?, ?, ?)";

    private static final String SELECT_TSHIRT_SQL =
            "select * from t_shirt where t_shirt_id = ?";

    private static final String SELECT_ALL_TSHIRT_SQL =
            "select * from t_shirt";

    private static final String UPDATE_TSHIRT_SQL =
            "update t_shirt set size = ?, color = ?, description = ?, price = ?, quantity=? where t_shirt_id = ?";

    private static final String DELETE_TSHIRT =
            "delete from t_shirt where t_shirt_id = ?";

    private static final String SELECT_TSHIRT_BY_SIZE_SQL =
            "select * from t_shirt where LOWER(size) like LOWER(?)";

    private static final String SELECT_TSHIRT_BY_COLOR_SQL =
            "select * from t_shirt where LOWER(color) like LOWER(?)";

    /**
     * Constructor
     * @param jdbcTemplate
     */
    @Autowired
    public TShirtDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * To add a TShirt
     * @param tshirt
     * @return TShirt
     */
    @Override
    public TShirt addTShirt(TShirt tshirt) {
        jdbcTemplate.update(
                INSERT_TSHIRT_SQL,
                tshirt.getSize(),
                tshirt.getColor(),
                tshirt.getDescription(),
                tshirt.getPrice(),
                tshirt.getQuantity()
        );
        int id = jdbcTemplate.queryForObject("select LAST_INSERT_ID()", Integer.class);
        tshirt.settShirtId(id);
        return tshirt;
    }

    /**
     * To get a TShirt
     * @param tshirtId
     * @return TShirt
     */
    @Override
    public TShirt getTShirt(int tshirtId) {
        try {
            return jdbcTemplate.queryForObject(SELECT_TSHIRT_SQL, this::mapRowToTShirt, tshirtId);
        } catch (EmptyResultDataAccessException e) {
            // if there is no match for this Game id, return null
            return null;
        }
    }

    /**
     * To get all TShirts
     * @return List<TShirt>
     */
    @Override
    public List<TShirt> getAllTShirt() {
        return jdbcTemplate.query(SELECT_ALL_TSHIRT_SQL, this::mapRowToTShirt);
    }

    /**
     * To update a TShirt
     * @param tshirt
     * @return TShirt
     */
    @Override
    public TShirt updateTShirt(TShirt tshirt) {
        jdbcTemplate.update(
                UPDATE_TSHIRT_SQL,
                tshirt.getSize(),
                tshirt.getColor(),
                tshirt.getDescription(),
                tshirt.getPrice(),
                tshirt.getQuantity(),
                tshirt.gettShirtId()
        );
        return tshirt;
    }

    /**
     * To delete a TShirt
     * @param tshirtId
     * @return int
     */
    @Override
    public int deleteTShirt(int tshirtId) {
        return jdbcTemplate.update(DELETE_TSHIRT, tshirtId);
    }

    /**
     * To get all TShirts by color
     * @param color
     * @return List<TShirt>
     */
    @Override
    public List<TShirt> getTShirtsByColor(String color) {
        return jdbcTemplate.query(SELECT_TSHIRT_BY_COLOR_SQL, this::mapRowToTShirt, color + "%");
    }

    /**
     * To get all TShirts by size
     * @param size
     * @return List<TShirt>
     */
    @Override
    public List<TShirt> getTShirtsBySize(String size) {
        return jdbcTemplate.query(SELECT_TSHIRT_BY_SIZE_SQL, this::mapRowToTShirt, size + "%");
    }

    /**
     * Maps table of data representing a database result set, which
     * is usually generated by executing a statement that queries the database.
     * @param rs
     * @param rowNum
     * @return TShirt
     * @throws SQLException
     */
    private TShirt mapRowToTShirt(ResultSet rs, int rowNum) throws SQLException {
        TShirt tShirt = new TShirt();
        tShirt.settShirtId(rs.getInt("t_shirt_id"));
        tShirt.setSize(rs.getString("size"));
        tShirt.setColor(rs.getString("color"));
        tShirt.setDescription(rs.getString("description"));
        tShirt.setPrice(rs.getBigDecimal("price"));
        tShirt.setQuantity(rs.getInt("quantity"));
        return tShirt;
    }
}
