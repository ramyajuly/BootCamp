package com.company.videogamestore.dao;

import com.company.videogamestore.model.Console;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 * Console Repository class with JdbcTemplate, prepared statements
 */
@Repository
public class ConsoleDaoJdbcTemplateImpl implements ConsoleDao {
    private JdbcTemplate jdbcTemplate;

    //Prepared Statements for Console
    private static final String INSERT_CONSOLE_SQL =
            "insert into console (model, manufacturer, memory_amount, processor, price,quantity) values (?, ?, ?, ?, ?,?)";

    private static final String SELECT_CONSOLE_SQL =
            "select * from console where console_id = ?";

    private static final String SELECT_ALL_CONSOLES_SQL =
            "select * from console";

    private static final String UPDATE_CONSOLE_SQL =
            "update console set model = ?, manufacturer = ?, memory_amount = ?, processor = ?, price = ?, quantity=? where console_id = ?";

    private static final String DELETE_CONSOLE =
            "delete from console where console_id = ?";

    private static final String SELECT_CONSOLES_BY_MANUFACTURE_SQL =
            "select * from console where LOWER(manufacturer) like LOWER(?)";

    /**
     * Constructor
     * @param jdbcTemplate
     */
    @Autowired
    public ConsoleDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * To add a new console
     * @param console
     * @return Console
     */
    @Override
    public Console addConsole(Console console) {
        jdbcTemplate.update(
                INSERT_CONSOLE_SQL,
                console.getModel(),
                console.getManufacturer(),
                console.getMemoryAmount(),
                console.getProcessor(),
                console.getPrice(),
                console.getQuantity()
        );
        int id = jdbcTemplate.queryForObject("select LAST_INSERT_ID()", Integer.class);
        console.setConsoleId(id);
        return console;
    }

    /**
     * To get a Console
     * @param consoleId
     * @return Console
     */
    @Override
    public Console getConsole(int consoleId) {
        try {
            return jdbcTemplate.queryForObject(SELECT_CONSOLE_SQL, this::mapRowToConsole, consoleId);
        } catch (EmptyResultDataAccessException e) {
            // if there is no match for this console id, return null
            return null;
        }
    }

    /**
     * To get all Consoles
     * @return List<Console>
     */
    @Override
    public List<Console> getAllConsole() {
        return jdbcTemplate.query(SELECT_ALL_CONSOLES_SQL, this::mapRowToConsole);
    }

    /**
     * To update a Console
     * @param console
     * @return Console
     */
    @Override
    public Console updateConsole(Console console) {
        jdbcTemplate.update(
                UPDATE_CONSOLE_SQL,
                console.getModel(),
                console.getManufacturer(),
                console.getMemoryAmount(),
                console.getProcessor(),
                console.getPrice(),
                console.getQuantity(),
                console.getConsoleId()
        );
        return console;
    }

    /**
     * To delete a Console
     * @param consoleId
     * @return int
     */
    @Override
    public int deleteConsole(int consoleId) {
     return   jdbcTemplate.update(DELETE_CONSOLE, consoleId);
    }

    /**
     * To get all Consoles by Manufacturer
     * @param manufacture
     * @return List<Console>
     */
    @Override
    public List<Console> getConsolesByManufacturer(String manufacture) {
        return jdbcTemplate.query(SELECT_CONSOLES_BY_MANUFACTURE_SQL, this::mapRowToConsole,manufacture+"%");
    }

    /**
     * Maps table of data representing a database result set, which
     * is usually generated by executing a statement that queries the database.v
     * @param rs
     * @param rowNum
     * @return Console
     * @throws SQLException
     */
    private Console mapRowToConsole(ResultSet rs, int rowNum) throws SQLException {
        Console console = new Console();
        console.setConsoleId(rs.getInt("console_id"));
        console.setModel(rs.getString("model"));
        console.setManufacturer(rs.getString("manufacturer"));
        console.setMemoryAmount(rs.getString("memory_amount"));
        console.setProcessor(rs.getString("processor"));
        console.setPrice(rs.getBigDecimal("price"));
        console.setQuantity(rs.getInt("quantity"));
        return console;
    }
}
